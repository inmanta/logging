"""
    Copyright 2013 KU Leuven Research and Development - iMinds - Distrinet

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Administrative Contact: dnet-project-office@cs.kuleuven.be
    Technical Contact: bart.vanbrabant@cs.kuleuven.be
"""

entity LogAgent extends ip::services::Server:
    """
        An agent that is used to accept logs and store them localy and/or
        send them to a collector
    """
end

entity LogCollector extends ip::services::Server:
    """
        A collector that accepts logs
    """
end

implement LogAgent using rsyslogLogAgent when host.os is "linux"

implementation rsyslogLogAgent for LogAgent:
    servers = logging::LogCollector
    conf_file = std::ConfigFile(host = host, path = "/etc/rsyslog.conf", content =
        template("logging/rsyslog.conf.tmpl"))
    pkg = std::Package(host = host, name = "rsyslog", state = "installed")
    svc = std::Service(host = host, name = "rsyslog", state = "running", onboot = true)

    svc.requires = [pkg, conf_file]
    conf_file.requires = pkg
end

implement LogCollector using std::none

syslog_server_range = ip::Port(low = 514)
s_agent = ip::DstService(proto = "tcp", dst_range = syslog_server_range)

logcollector_server_range = ip::Port(low = 5514)
s_server = ip::DstService(proto = "tcp", dst_range = logcollector_server_range)

typedef Agent as LogAgent(services = logging::s_agent)
typedef Collector as LogCollector(services = logging::s_server)

